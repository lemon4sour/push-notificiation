@model Dictionary<string, FirebaseToken>
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

<style>
    .form-control::placeholder {
        color: #bdbdbd; /* Change this color to what you prefer */
        opacity: 1; /* For older browsers */
    }
</style>

<div class="container mt-5 p-4 border rounded-3">
    <div class="row">
        <!-- Left side (Form) -->
        <div class="col-md-6 bg-secondary text-white p-4 rounded-3">
            <h3>Push Notification</h3>
            <form id="notifyTopicForm">
                <div class="mb-3">
                    <label for="notificationHeader" class="form-label">Notification Header</label>
                    <input type="text" class="form-control bg-secondary text-white border-2" id="notificationHeader" name="notificationHeader" required>
                </div>
                <div class="mb-3">
                    <label for="notificationBody" class="form-label">Notification Body</label>
                    <textarea class="form-control bg-secondary text-white border-2" id="notificationBody" name="notificationBody" rows="3" required></textarea>
                </div>
                <div class="mb-3">
                    <label for="topics" class="form-label">Topics</label>
                    <input type="text" class="form-control bg-secondary text-white border-2" id="topics" name="topics" placeholder="e.g., topic1, topic2, topic3">
                </div>
                <button type="button" class="btn btn-primary" id="submitNotification">Push</button>
            </form>
            <script>
                document.getElementById('submitNotification').addEventListener('click', async function () {
                    const notificationHeader = document.getElementById('notificationHeader').value;
                    const notificationBody = document.getElementById('notificationBody').value;
                    const topics = document.getElementById('topics').value;

                    const data = {
                        notificationHeader,
                        notificationBody,
                        topics
                    };

                    try {
                        const response = await fetch('/Home/NotifyTopic', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(data)
                        });

                        const result = await response.json();
                        if (response.ok) {
                            console.log("Notifications sent successfully!");
                        } else {
                            console.log(`Error: ${result.message}`);
                        }
                    } catch (error) {
                        console.log(`Error: ${result.message}`);;
                    }
                });
            </script>
        </div>
        <!-- Right side (Empty) -->
        <div class="col-md-6"></div>
    </div>
</div>

<div class="container">
    <h1 class="mt-4">Firebase Tokens</h1>
    <ol class="list-group mt-3">
        @foreach (var kvp in Model)
        {
            <li class="list-group-item d-flex align-items-center text-break" id="@kvp.Key">
                <input type="checkbox" class="form-check-input me-3" />
                <div class="w-100">
                    <small class="text-muted">@kvp.Key</small>
                    <div>
                        <strong>@string.Join(", ", kvp.Value.topics)</strong>
                    </div>
                    <div class="text-muted">
                        @{
                            string timestampText;
                            try
                            {
                                // Convert milliseconds to seconds
                                long seconds = kvp.Value.timestamp / 1000;
                                timestampText = DateTimeOffset.FromUnixTimeSeconds(seconds).UtcDateTime.ToString("yyyy-MM-dd HH:mm:ss");
                            }
                            catch (ArgumentOutOfRangeException)
                            {
                                timestampText = "Invalid timestamp";
                            }
                        }
                        @timestampText
                    </div>
                </div>
            </li>
        }
    </ol>
</div>